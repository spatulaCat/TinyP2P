/*
* The MIT License
*
* Copyright 2015 Nicky.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
* THE SOFTWARE.
*/
package tinyp2p;

import java.awt.Container;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import static java.lang.String.valueOf;
import java.util.Collections;
import java.util.List;
import java.util.Map;
// java.util.Timer;
import java.util.TimerTask;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.Timer;
import javax.swing.SwingWorker;
import javax.swing.tree.DefaultMutableTreeNode;
import net.tomp2p.dht.FutureGet;
import net.tomp2p.dht.FuturePut;
import net.tomp2p.dht.PutBuilder;
import net.tomp2p.peers.Number160;
import net.tomp2p.peers.PeerAddress;
import net.tomp2p.peers.PeerStatistic;
import net.tomp2p.storage.Data;
import util.ConsoleFileAgent;
import org.hive2hive.core.api.interfaces.IH2HNode;
import org.hive2hive.core.api.interfaces.IUserManager;
import org.hive2hive.core.exceptions.NoPeerConnectionException;
import org.hive2hive.core.exceptions.NoSessionException;
import org.hive2hive.core.security.UserCredentials;
import org.hive2hive.processframework.exceptions.InvalidProcessStateException;
import org.hive2hive.processframework.exceptions.ProcessExecutionException;

/**
 *
 * @author Nicky
 */

public class MainMenu extends javax.swing.JFrame {
    private String username;
    private String password;
    private IH2HNode node;
    private UserCredentials userCredentials;
   // private DefaultListModel lm = new DefaultListModel();
    
    int c = 1;
    
    public MainMenu() {
        initComponents();
    }
    
    public MainMenu(String User, String pw, IH2HNode node) {
        this.username = User;
        this.password = pw;
        this.node = node;
        //online.setModel(lm);
        initComponents();
        
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
//    public void login(){
//        userCredentials = new UserCredentials(username, password, "12345");
//        try{
//            File d;
//            if( registered(userCredentials)){
//                // d = chooseDir();
//                File f = new File ("C:\\");
//                ConsoleFileAgent fileAgent = new ConsoleFileAgent(f);
//                node.getUserManager().createLoginProcess(userCredentials, fileAgent).execute();
//            }
//            else{
//                //d = chooseDir();
//                File f = new File ("C:\\");
//                node.getUserManager().createRegisterProcess(userCredentials).execute();
//                ConsoleFileAgent fileAgent = new ConsoleFileAgent(f);
//                node.getUserManager().createLoginProcess(userCredentials, fileAgent).execute();
//            }
//        }catch(NoPeerConnectionException | InvalidProcessStateException | ProcessExecutionException | InterruptedException e ){System.out.println(e);};
//        
//        PutBuilder f  = new PutBuilder(node.getPeer(),node.getPeer().peerID());
//        try{
//            Data d = new Data(username);
//            f.data(d);
//            FuturePut futurePut = node.getPeer().put(node.getPeer().peer().peerID()).data(new Data(username)).start();
//            futurePut.awaitUninterruptibly();
//        }catch(IOException e){System.out.println(e);}
//    }
//    
    
    //returns whether or not a person is registered or not
    private boolean registered(UserCredentials userCredentials) throws NoPeerConnectionException, InvalidProcessStateException, InterruptedException {
        //System.out.println(node.getPeer().peerAddress());
        IUserManager userManager = node.getUserManager();
        return userManager.isRegistered(userCredentials.getUserId());
    }
//    
    public  void getUsers() {
        DefaultListModel lm = new DefaultListModel();
        online.setModel(lm);
        List<Map<Number160, PeerStatistic>> peerMapVerified = node.getPeer().peerBean().peerMap().peerMapVerified();
        for (Map<Number160, PeerStatistic>  m: peerMapVerified){
            
            for (Map.Entry<Number160, PeerStatistic> entry : m.entrySet())
            {
                PeerStatistic ps = entry.getValue();
                
                FutureGet futureGet = node.getPeer().get(ps.peerAddress().peerId()).start();
                
                futureGet.awaitUninterruptibly();
                
                //timer.scheduleAtFixedRate(refreshUsers, 0, 1000);
                
                try {
                    lm.addElement(futureGet.data().object());
                    online.setModel(lm);
//
                } catch (ClassNotFoundException | IOException ex) {
                    
                }
                
            }
        }
       // online.updateUI();
    }
    
    int debug = 0;
    
    class displayUsers implements ActionListener{
        @Override
        public void actionPerformed(ActionEvent evt){
            debug++;     
            //System.out.println(valueOf(debug));
            DefaultListModel lm = new DefaultListModel();
            online.setModel(lm);
     
             List<PeerAddress> peerMap = node.getPeer().peerBean().peerMap().all();
            
             for (PeerAddress pa : peerMap){
                   
                    FutureGet futureGet = node.getPeer().get(pa.peerId()).start();
                    
                    futureGet.awaitUninterruptibly();
                    
                    if (!futureGet.isEmpty()){
                        try {                 
                            lm.addElement(futureGet.data().object());
                            online.setModel(lm);
                        } catch (ClassNotFoundException | IOException ex) {
                        }
                    }
                     
                     futureGet.cancel();
             }
            online.setModel(lm);
            
            
            
            
           //  System.out.println("START" + debug);
//            System.out.println(peerMapVerified.toString());
//            System.out.println("END" + debug);
//            System.out.println();
            
            
            
            //List<Map<Number160, PeerStatistic>> peerMapVerified = node.getPeer().peerBean().peerMap().peerMapVerified();
           
//           
            
//            for (Map<Number160, PeerStatistic>  m: peerMapVerified){
//                
//                for (Map.Entry<Number160, PeerStatistic> entry : m.entrySet())
//                {
//                    PeerStatistic ps = entry.getValue();
//                    
//                    FutureGet futureGet = node.getPeer().get(ps.peerAddress().peerId()).start();
//                    
//                    futureGet.awaitUninterruptibly();
//                    
//                    if (!futureGet.isEmpty()){
//                        try {                           
//                            lm.addElement(futureGet.data().object());
//                            online.setModel(lm);
//                        } catch (ClassNotFoundException | IOException ex) {
//                        }
//                    }
//                     
//                     futureGet.cancel();
//                }
//                online.setModel(lm);
//            }
            
            // online.updateUI();
            
        }
    }
    
    
//     Timer timer = new Timer();
//
//     TimerTask refreshUsers = new TimerTask() {
//
//        @Override
//        public void run() {
//
//            jLabel3.setText(String.valueOf(c));
//            c++;
//
//            online.setModel(lm);
//
//           // try {
//                //getUsers();
////            DefaultListModel lm = new DefaultListModel();
////            //online.setModel(lm);
////            List<Map<Number160, PeerStatistic>> peerMapVerified = node.getPeer().peerBean().peerMap().peerMapVerified();
////            for (Map<Number160, PeerStatistic>  m: peerMapVerified){
////
////                for (Map.Entry<Number160, PeerStatistic> entry : m.entrySet())
////                {
////                    PeerStatistic ps = entry.getValue();
////
////                    FutureGet futureGet = node.getPeer().get(ps.peerAddress().peerId()).start();
////                    futureGet.awaitUninterruptibly();
////                    try {
////                        lm.addElement(futureGet.data().object());
////                        System.out.println(futureGet.data().object());
////                        online.setModel(lm);
//////
////                    } catch (ClassNotFoundException | IOException ex) {
////                        Logger.getLogger(RootMenuGUI.class.getName()).log(Level.SEVERE, null, ex);
////                    }
////
////                }
//                //           }
////            } catch (InterruptedException ex) {
////                Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
////            }
////            } catch (InterruptedException ex) {
////                Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
////            }
//        }
//    };
//
    
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        online = new javax.swing.JList();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(500, 300));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Aharoni", 1, 18)); // NOI18N
        jLabel1.setText("Welcome");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, 295, -1));

        jLabel2.setText("Online users");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, -1));

        jButton2.setBackground(new java.awt.Color(204, 255, 204));
        jButton2.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton2.setText("Refresh");
        jButton2.setBorder(null);
        jButton2.setMargin(new java.awt.Insets(2, 10, 2, 10));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, 40, 20));

        online.setBackground(new java.awt.Color(222, 255, 204));
        online.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(online);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 110, 200));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    SwingWorker loginWorker = new SwingWorker<String, Void>() {
        @Override
        public String doInBackground() {
            userCredentials = new UserCredentials(username, password, "12345");
            try{
                File d;
                if( registered(userCredentials)){
                    // d = chooseDir();
                    File f = new File ("C:\\");
                    ConsoleFileAgent fileAgent = new ConsoleFileAgent(f);
                    node.getUserManager().createLoginProcess(userCredentials, fileAgent).execute();
                }
                else{
                    //d = chooseDir();
                    File f = new File ("C:\\");
                    node.getUserManager().createRegisterProcess(userCredentials).execute();
                    ConsoleFileAgent fileAgent = new ConsoleFileAgent(f);
                    node.getUserManager().createLoginProcess(userCredentials, fileAgent).execute();
                }
            }catch(NoPeerConnectionException | InvalidProcessStateException | ProcessExecutionException | InterruptedException e ){System.out.println(e);};
            
            PutBuilder f  = new PutBuilder(node.getPeer(),node.getPeer().peerID());
            try{
                Data d = new Data(username);
                f.data(d);
                FuturePut futurePut = node.getPeer().put(node.getPeer().peer().peerID()).data(new Data(username)).start();
                futurePut.awaitUninterruptibly();
            }catch(IOException e){System.out.println(e);}
            return null;
        }
        
        @Override
        public void done() {
             jLabel1.setText("Welcome, "+ username+"!");
        }
    };
    
    
    SwingWorker usersWorker = new SwingWorker<String, Void>() {
        @Override
        public String doInBackground() {
            DefaultListModel lm = new DefaultListModel();
            online.setModel(lm);
            List<Map<Number160, PeerStatistic>> peerMapVerified = node.getPeer().peerBean().peerMap().peerMapVerified();
            for (Map<Number160, PeerStatistic>  m: peerMapVerified){
                
                for (Map.Entry<Number160, PeerStatistic> entry : m.entrySet())
                {
                    PeerStatistic ps = entry.getValue();System.out.println(ps.toString());
                    FutureGet futureGet = node.getPeer().get(ps.peerAddress().peerId()).start();
                    
                    futureGet.awaitUninterruptibly();
                    
                    //timer.scheduleAtFixedRate(refreshUsers, 0, 1000);
                    
                    try {
                        lm.addElement(futureGet.data().object());
                        online.setModel(lm);
//
                    } catch (ClassNotFoundException | IOException ex) {
                        
                    }
                    
                }
            }
            
            return null;
        }
        @Override
         public void done() {
             //online.updateUI();
         }
    };
    
    
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
        // login();
        loginWorker.execute();
       // usersWorker.execute();
        Timer tmr;
        displayUsers du = new displayUsers();                      //set up timer
        tmr = new javax.swing.Timer(2500, new displayUsers());
        tmr.addActionListener(du);
        tmr.setInitialDelay(0);
        tmr.setRepeats(true);
        tmr.start();   
     
//        int timerDelay = 1000; // 1000 msecs or 1 second
//        Timer timer = new Timer(timerDelay, new ActionListener() {
//            
//            @Override
//            public void actionPerformed(ActionEvent e) {
//               DefaultListModel lm = new DefaultListModel();
//            online.setModel(lm);
//            List<Map<Number160, PeerStatistic>> peerMapVerified = node.getPeer().peerBean().peerMap().peerMapVerified();
//            for (Map<Number160, PeerStatistic>  m: peerMapVerified){
//                
//                for (Map.Entry<Number160, PeerStatistic> entry : m.entrySet())
//                {
//                    PeerStatistic ps = entry.getValue();
//                    
//                    FutureGet futureGet = node.getPeer().get(ps.peerAddress().peerId()).start();
//                    
//                    futureGet.awaitUninterruptibly();
//                    
//                    //timer.scheduleAtFixedRate(refreshUsers, 0, 1000);
//                    
//                    try {
//                        lm.addElement(futureGet.data().object());
//                        online.setModel(lm);
////
//                    } catch (ClassNotFoundException | IOException ex) {
//                        
//                    }
//                    
//                }
//            }
//            }
//            
//        });
//        timer.setInitialDelay(0);
//        timer.start();
//
//        
        
//        Timer timer = new Timer();
//        timer.scheduleAtFixedRate(usersWorker.execute(),0,300);
        //getUsers();
        //timer.scheduleAtFixedRate(refreshUsers, 0, 1000);
        
        //getUsers();
//        File dir = ;
//         JTree tree = new JTree(addNodes(null, dir));
//         jPanel1.add(tree);
//         jPanel1.setVisible(true);
        
//        JFrame frame = new JFrame("FileTree");
//        Container cp = frame.getContentPane();
//        cp.add(new FileTree(new File(".")));
//        frame.pack();
//        frame.setVisible(true);
        
        
//        tree.addTreeSelectionListener(new TreeSelectionListener() {
//      @Override
//      public void valueChanged(TreeSelectionEvent e) {
//        DefaultMutableTreeNode node = (DefaultMutableTreeNode) e
//            .getPath().getLastPathComponent();
//        System.out.println("You selected " + node);
//      }
//    });
        
    }//GEN-LAST:event_formWindowOpened
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        getUsers();
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        try {
            shutdown();
        } catch (NoPeerConnectionException | NoSessionException ex) {
            Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosed
    
    public void shutdown() throws NoPeerConnectionException, NoSessionException {
        if (node != null && node.isConnected()) {
            node.disconnect();
            node.getUserManager().createLogoutProcess();
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainMenu().setVisible(true);
                
            }
        });
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList online;
    // End of variables declaration//GEN-END:variables
    
    DefaultMutableTreeNode addNodes(DefaultMutableTreeNode curTop, File dir) {
        String curPath = dir.getPath();
        DefaultMutableTreeNode curDir = new DefaultMutableTreeNode(curPath);
        if (curTop != null) { // should only be null at root
            curTop.add(curDir);
        }
        Vector ol = new Vector();
        String[] tmp = dir.list();
        for (String tmp1 : tmp) {
            ol.addElement(tmp1);
        }
        Collections.sort(ol, String.CASE_INSENSITIVE_ORDER);
        File f;
        Vector files = new Vector();
        // Make two passes, one for Dirs and one for Files. This is #1.
        for (int i = 0; i < ol.size(); i++) {
            String thisObject = (String) ol.elementAt(i);
            String newPath;
            if (curPath.equals("."))
                newPath = thisObject;
            else
                newPath = curPath + File.separator + thisObject;
            if ((f = new File(newPath)).isDirectory())
                addNodes(curDir, f);
            else
                files.addElement(thisObject);
        }
        // Pass two: for files.
        for (int fnum = 0; fnum < files.size(); fnum++)
            curDir.add(new DefaultMutableTreeNode(files.elementAt(fnum)));
        return curDir;
    }
}
