package tinyp2p;

import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.util.Enumeration;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JTree;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.Timer;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import net.tomp2p.dht.FutureGet;
import net.tomp2p.dht.FuturePut;
import net.tomp2p.dht.PutBuilder;
import net.tomp2p.peers.Number160;
import net.tomp2p.peers.PeerAddress;
import net.tomp2p.storage.Data;
import org.apache.commons.io.IOUtils;
import org.hive2hive.core.api.interfaces.IH2HNode;
import org.hive2hive.core.api.interfaces.IUserManager;
import org.hive2hive.core.exceptions.NoPeerConnectionException;
import org.hive2hive.core.security.UserCredentials;
import org.hive2hive.processframework.exceptions.InvalidProcessStateException;
import org.hive2hive.processframework.exceptions.ProcessExecutionException;
import util.ConsoleFileAgent;


public class MainMenu extends javax.swing.JFrame {
    private String username;
    private String password;
    private IH2HNode node;
    private UserCredentials userCredentials;
    private String[] ips;
    private DefaultListModel lm;
    private FileWriter fw ;
    private String chosenDir;
    private String chosenDirFolderName;
    private JTree tree;
    private String selectedUser;
   // private boolean stillPopulating;
    private ConcurrentHashMap<String, String> userIPs;
    public TCPServer server;
    
    public MainMenu() {
        initComponents();
    }
    
    public MainMenu(String User, String pw, IH2HNode node, Rectangle bounds, String[] ips) throws IOException {
        this.username = User;
        this.password = pw;
        this.node = node;
        this.ips = ips;
        
        initComponents();
        
        this.setBounds(bounds);
        tinyButt.setOpaque(false);
        tinyButt.setContentAreaFilled(false); //to make the content area transparent
        tinyButt.setBorderPainted(false);
        
        fw = new FileWriter("dirList.txt");
        userIPs = new ConcurrentHashMap();
        
        try{
            
        List<String> lines =IOUtils.readLines(new FileInputStream("TinyP2PSettings.txt"));
        
        chosenDir =  lines.get(0);
        }catch(IndexOutOfBoundsException | FileNotFoundException  e){}
        
        //online.setComponentPopupMenu(jPopupMenu1);
        //jScrollPane2.setComponentPopupMenu(jPopupMenu1);
            
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser = new javax.swing.JFrame();
        fileChooser = new javax.swing.JFileChooser();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jScrollPane2 = new javax.swing.JScrollPane();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        online = new javax.swing.JList();
        tinyButt = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        fileChooser.setCurrentDirectory(new java.io.File("C:\\Users\\(._.)\\.ssh"));

        javax.swing.GroupLayout jFileChooserLayout = new javax.swing.GroupLayout(jFileChooser.getContentPane());
        jFileChooser.getContentPane().setLayout(jFileChooserLayout);
        jFileChooserLayout.setHorizontalGroup(
            jFileChooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jFileChooserLayout.setVerticalGroup(
            jFileChooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFileChooserLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(fileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(600, 383));
        setMinimumSize(new java.awt.Dimension(600, 383));
        setPreferredSize(new java.awt.Dimension(600, 383));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane2MouseClicked(evt);
            }
        });
        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 60, 230, 240));

        jLabel1.setFont(new java.awt.Font("Aharoni", 1, 18)); // NOI18N
        jLabel1.setText("Welcome");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, 295, -1));

        jLabel2.setText("Online users");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, -1, -1));

        online.setBackground(new java.awt.Color(222, 255, 204));
        online.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        online.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                onlineMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(online);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 130, 240));

        tinyButt.setBackground(new java.awt.Color(204, 255, 204));
        tinyButt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/tiny7.png"))); // NOI18N
        tinyButt.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        tinyButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tinyButtActionPerformed(evt);
            }
        });
        getContentPane().add(tinyButt, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 0, 40, 40));

        jButton1.setText("Download");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 60, -1, -1));

        jButton3.setText("View my shared folder");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 30, 150, -1));

        jButton5.setText("Show Files");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 60, -1, -1));

        jLabel3.setText(" ");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 310, 570, -1));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/bg3.png"))); // NOI18N
        jLabel7.setText("jLabel7");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(1, 0, 600, 370));

        jMenuBar1.setBorder(null);

        jMenu1.setText("Settings");

        jMenuItem1.setText("Change shared directory");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
//    JPopupMenu jPopupMenu = new JPopupMenu() {
//   
// @Override
//    public void show(Component invoker, int x, int y) {
//        int row = online.locationToIndex(new Point(x, y));
//        if (row != -1) {
//            online.setSelectedIndex(row);
//        }
//        super.show(invoker, x, y);
//    }
//};

    
    MouseAdapter n = new MouseAdapter(){
        @Override
        public void mousePressed ( MouseEvent e )
        {
            try{
                selectedUser = lm.elementAt(online.getSelectedIndex()).toString();
                showFiles();
            }catch(ArrayIndexOutOfBoundsException ex){}
        }
        
        
    };
    
    MouseAdapter m = new MouseAdapter ()
    { 
       String p;
     TreePath path;
        @Override
        public void mousePressed ( MouseEvent e )
        {
            if ( SwingUtilities.isRightMouseButton ( e ) )
            {
                path = tree.getPathForLocation ( e.getX (), e.getY () );
                Rectangle pathBounds = tree.getUI ().getPathBounds ( tree, path );
                if ( pathBounds != null && pathBounds.contains ( e.getX (), e.getY () ) )
                {
                    JPopupMenu menu = new JPopupMenu ();
                    // menu.add ( new JMenuItem ( "Download " + path.getLastPathComponent().toString() ) );
                    p = path.getLastPathComponent().toString();
                    JMenuItem jm = new JMenuItem("Download " + p); 
               
                    MouseListener popupListener = new PopupListener();
                    jm.addMouseListener(popupListener);
                    menu.add(jm);
                    menu.show ( tree, pathBounds.x, pathBounds.y + pathBounds.height );
                }
            }
        }
        
        
        
        class PopupListener extends MouseAdapter {
            @Override
            public void mousePressed(MouseEvent e) {
              new downloadWorkerClass(path).execute();
              //  download(path);
                System.out.println(path);
               // maybeShowPopup(e);
            }
            
//            @Override
//            public void mouseReleased(MouseEvent e) {
//                
//                maybeShowPopup(e);
//            }
//            
//            private void maybeShowPopup(MouseEvent e) {
//                if (e.isPopupTrigger()) {
//            download(path);
////                    //  popup.show(e.getComponent(),
////                    //    e.getX(), e.getY());
//                }
//            }
        }
        
    };
            
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        loginWorker.execute();
        jLabel1.setText("Welcome, "+ username+"!");
        listenWorker.execute();
        
        displayUsers du = new displayUsers();                      //set up timer
        Timer tmr = new javax.swing.Timer(10000, du);
       
        //tmr.addActionListener(du);
        tmr.setInitialDelay(0);
        tmr.setRepeats(true);
        tmr.start();
        
        online.addMouseListener(n);
        
        
//        try {
//            ServerSocket serverSocket = new ServerSocket(15123);
//            Socket socket = serverSocket.accept();
//
//        } catch (IOException ex) {
//            Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
//        }
        
    }//GEN-LAST:event_formWindowOpened
    
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        this.dispose();
        shutdown();
        System.exit(0);
    }//GEN-LAST:event_formWindowClosed
    
    private void tinyButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tinyButtActionPerformed
        Help h = new Help(this.getBounds(),ips);
        h.setVisible(true);       
    }//GEN-LAST:event_tinyButtActionPerformed
    
    public void sendToPort(String ip, String msg) throws IOException {
        Socket socket = null;
        OutputStreamWriter osw;
        //String str = "Hello World";
        try {
            socket = new Socket(ip, 4014);
            osw =new OutputStreamWriter(socket.getOutputStream(), "UTF-8");
            osw.write(msg, 0, msg.length());
            osw.flush();
        } catch (IOException e) {
            System.err.print(e);
        } finally {
            socket.close();
        }
        
    }
    
    

    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       new downloadWorkerClass(null).execute();
        
//            String[] parts = f.split("\\|");
//            // System.out.println(Arrays.toString(parts2));
//            String fileSize = parts[1].substring(0,parts[1].length()-1);
//           
//            int filesize = Integer.parseInt(fileSize.trim());
//            
//   
//            int bytesRead;
//            int currentTot = 0;
//            Socket recSocket;
//              System.out.println(userIPs.get(selectedUser).substring(1));
//            
//            //String suIP = userIPs.get(selectedUser);
//          
//            recSocket = new Socket(userIPs.get(selectedUser).substring(1),6789);
//           
//            byte [] bytearray = new byte [filesize];
//            InputStream is = recSocket.getInputStream();
//            FileOutputStream fos = new FileOutputStream("newfile.txt");
//            BufferedOutputStream bos = new BufferedOutputStream(fos);
//            bytesRead = is.read(bytearray,0,bytearray.length);
//            currentTot = bytesRead;
//          //  System.out.println("Listening for the file");
//            do { bytesRead = is.read(bytearray, currentTot, (bytearray.length-currentTot));
//            if(bytesRead >= 0) currentTot += bytesRead;
//            }
//            while(bytesRead > -1);
//            bos.write(bytearray, 0 , currentTot);
//            bos.flush();
//            bos.close();
//            recSocket.close();
//            System.out.println("file successfully transferred");
            
       
        
        
        
        
        
//        String f = jTextField1.getText();
//
//        //jTextField2.setText(lm.elementAt(online.getSelectedIndex()).toString());
//        //String user = jTextField2.getText();
//        System.out.println("Requesting file");
//
//        int filesize=1022386;
//        int bytesRead;
//        int currentTot = 0;
//        Socket socket;
//        try {
//            socket = new Socket("146.231.133.148",15123);
//
//            byte [] bytearray = new byte [filesize];
//            InputStream is = socket.getInputStream();
//            FileOutputStream fos = new FileOutputStream("bg1copy.png");
//            BufferedOutputStream bos = new BufferedOutputStream(fos);
//            bytesRead = is.read(bytearray,0,bytearray.length);
//            currentTot = bytesRead;
//            System.out.println("Listening for the file");
//            do { bytesRead = is.read(bytearray, currentTot, (bytearray.length-currentTot));
//            if(bytesRead >= 0) currentTot += bytesRead;
//            }
//            while(bytesRead > -1);
//            bos.write(bytearray, 0 , currentTot);
//            bos.flush();
//            bos.close();
//            socket.close();
//            System.out.println("file successfully transferred");
//        } catch (IOException ex) {
//            Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
//        }
        
        
        
        
//        try {
//            sendToPort(f,user);
//
//        } catch (IOException ex) {
//            Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
//      Socket socket = new Socket("ip address", 4014);
//       //OutputStream outstream = socket .getOutputStream();
//      // PrintWriter out = new PrintWriter(outstream);
//
//       String toSend = "String to send";
//
//       out.print(toSend );
//
//
        
        
    }//GEN-LAST:event_jButton1ActionPerformed
        
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
 
        try {
            List<String> lines =IOUtils.readLines(new FileInputStream("dirList.txt"));
            
            DefaultMutableTreeNode root = new DefaultMutableTreeNode("Shared");
            
            DefaultTreeModel model = new DefaultTreeModel(root);
            tree = new JTree(model);
            tree.addMouseListener ( m );
            
            
            
            //jm.action(null, root)
            
            for (String line : lines){
                buildTreeFromString(model, line);
            }
            jScrollPane2.getViewport().add(tree);
       //     jScrollPane2.setComponentPopupMenu(jPopupMenu1);
            //tree.setComponentPopupMenu(jPopupMenu1);
            
//            jTextField3.setText(tree.getLastSelectedPathComponent().toString());
            
            
            
            
        } catch ( NullPointerException | IOException ex) {
            Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
        }      
    }//GEN-LAST:event_jButton3ActionPerformed
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
       
        try {
            chosenDir = getDir();
        } catch (IOException ex) {
            Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
        createDirListSwingWorker();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

                
//@Override
//public void mouseClicked(MouseEvent e) {
//
//    if (SwingUtilities.isRightMouseButton(e)) {
//
//        int row = tree.getClosestRowForLocation(e.getX(), e.getY());
//        tree.setSelectionRow(row);
//        jPopupMenu1.show(e.getComponent(), e.getX(), e.getY());
//    }
//}
    
    private void showFiles(){
        
     //   List<String> results = null;
       
        try{
            Number160 dirlistHash2 = Number160.createHash(selectedUser + "dirlist");
//            System.out.println("hash = " + dirlistHash2);
//            System.out.println("user = " + selectedUser);
            FutureGet futureGet = node.getPeer().get(dirlistHash2).start();
            futureGet.awaitUninterruptibly();
            if (!futureGet.isEmpty()){
                Object result = futureGet.data().object();
               // System.out.println(result.toString());
                
                String[] fs = result.toString().split(",");
                fs[0] = fs[0].substring(1);
                fs[fs.length-1] =  fs[fs.length-1].substring(0,fs[fs.length-1].length()-1);
                //Remove "[" and "]"   
                            
                DefaultMutableTreeNode root = new DefaultMutableTreeNode(selectedUser + "'s shared directory");
                
                DefaultTreeModel model = new DefaultTreeModel(root);
                tree = new JTree(model);
                tree.addMouseListener ( m );
                try{
                for (String line : fs){
                    if(line.substring(0,1).equalsIgnoreCase(" ")){
                        line = line.substring(1,line.length());
                    }
                    buildTreeFromString(model, line);
                }
                jScrollPane2.getViewport().add(tree);
                }catch(StringIndexOutOfBoundsException e){
                    
                }
            }
              
        }catch(NullPointerException e){
        } catch (ClassNotFoundException | IOException ex) {
            Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        showFiles();

//        DefaultMutableTreeNode root = new DefaultMutableTreeNode(selectedUser +"'s Shared directory");
//        
//        DefaultTreeModel model = new DefaultTreeModel(root);
//        tree = new JTree(model);
        
//        for (String line : results){
//            buildTreeFromString(model, line);
//        }
//        jScrollPane2.getViewport().add(tree);
        
        
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void onlineMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onlineMouseClicked
//       online.setComponentPopupMenu(jPopupMenu1);
//     //  jScrollPane2.setComponentPopupMenu(jPopupMenu1);
//       jPopupMenu1.show();
    }//GEN-LAST:event_onlineMouseClicked

    private void jScrollPane2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane2MouseClicked
//     jScrollPane2.setComponentPopupMenu(jPopupMenu1);
//       jPopupMenu1.show();
    }//GEN-LAST:event_jScrollPane2MouseClicked
          
   

//    public void valueChanged(TreeSelectionEvent e) {
//        //Returns the last path element of the selection.
//        //This method is useful only when the selection model allows a single selection.
//        DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();
//        
//        if (node == null)
//            //Nothing is selected.
//            return;
//        
//        //Object nodeInfo = node.getUserObject();
//        
//        
//    }
    
        //returns whether or not a person is registered or not
    private boolean registered(UserCredentials userCredentials) throws NoPeerConnectionException, InvalidProcessStateException, InterruptedException {    
        IUserManager userManager = node.getUserManager();
        return userManager.isRegistered(userCredentials.getUserId());
    }
   
//    class downloadItem implements ActionListener{
//        @Override
//        public void actionPerformed(ActionEvent evt){
//            download("");
//        }
//    }
    
    class displayUsers implements ActionListener{
        @Override
        public void actionPerformed(ActionEvent evt){
            lm = new DefaultListModel();    
            online.setModel(lm);
            try{
             List<PeerAddress> peerMap = node.getPeer().peerBean().peerMap().all();
             for (PeerAddress pa : peerMap){   
                    FutureGet futureGet = node.getPeer().get(pa.peerId()).start();
                    futureGet.awaitUninterruptibly();                   
                    if (!futureGet.isEmpty()){
                        try {          
                            Object n = futureGet.data().object();
                            lm.addElement(n);
                            userIPs.putIfAbsent(n.toString(),pa.inetAddress().toString());

                        } catch (ClassNotFoundException | IOException ex) {
                        }
                    }        
             }
            online.setModel(lm);
            }catch(NullPointerException e){            
            }  
        }
    }
    
    class downloadWorkerClass extends SwingWorker<Void, TreePath>{
        private TreePath tp;
        public downloadWorkerClass(TreePath t){
            this.tp = t;
        }
        
        @Override
        public Void doInBackground(){
            String fname;
         Object[] nodes;
        try {
            if(tp==null){
                fname  = tree.getSelectionPath().getLastPathComponent().toString();
                nodes = tree.getSelectionPath().getPath();
               
                
            }
            else{
                fname = tp.getLastPathComponent().toString();
               nodes = tp.getPath();
                
            }
            
            
//            String path = tree.getSelectionPath().toString().replaceAll("\\]| |\\[|", "").replaceAll(",", File.separator);
//            File fp = new File(path);
//            System.out.println("path "+fp.toString());
//
             StringBuilder sb = new StringBuilder();
                
                for(int i=0;i<nodes.length;i++) {
                    sb.append(File.separatorChar).append(nodes[i].toString());
                }
            
            System.out.println("path "+sb.toString());
            
            
            String[] request = {username,sb.toString()};
            
            
            //  String[] request = {username,fname};
            TCPClient client = new TCPClient(userIPs.get(selectedUser).substring(1),6789,fname);
            
            client.SendToServer(request);
   
            System.out.println(client.RecieveFromServer());
            client.close();
            
        } catch (Exception ex) {
            //  Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println(ex);
        }
            
            return null;
        }
    }
    
//    SwingWorker downloadWorker = new SwingWorker<String, TreePath>() {
//        @Override
//        public String doInBackground() {
//          
//            
//            return null;
//        }
//        
//            public void download(TreePath path){
//        
//        String fname;
//         Object[] nodes;
//        try {
//            if(path==null){
//                fname  = tree.getSelectionPath().getLastPathComponent().toString();
//                nodes = tree.getSelectionPath().getPath();
//               
//                
//            }
//            else{
//                fname = path.getLastPathComponent().toString();
//               nodes = path.getPath();
//                
//            }
//            
//            
////            String path = tree.getSelectionPath().toString().replaceAll("\\]| |\\[|", "").replaceAll(",", File.separator);
////            File fp = new File(path);
////            System.out.println("path "+fp.toString());
////
//             StringBuilder sb = new StringBuilder();
//                
//                for(int i=0;i<nodes.length;i++) {
//                    sb.append(File.separatorChar).append(nodes[i].toString());
//                }
//            
//            System.out.println("path "+sb.toString());
//            
//            
//            String[] request = {username,sb.toString()};
//            
//            
//            //  String[] request = {username,fname};
//            TCPClient client = new TCPClient(userIPs.get(selectedUser).substring(1),6789,fname);
//            
//            client.SendToServer(request);
//   
//            System.out.println(client.RecieveFromServer());
//            client.close();
//            
//        } catch (Exception ex) {
//            //  Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
//            System.out.println(ex);
//        }
//        
//    }
//    };
//    
    private void createDirListSwingWorker()
    {
     SwingWorker createDirList = new SwingWorker<String, Void>() {
        @Override
        public String doInBackground() {
            try {
               // chosenDir = getDir();
                //System.out.println("writing directory list");
                jLabel3.setText("Saving directory list");
                makeFile(chosenDir);
             //   System.out.println("directory list written");
                jLabel3.setText("Directory list saved");
            } catch (IOException ex) {
                Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
            }
            uploadDirList();
            return null;
        }
        
         private void uploadDirList(){
        jLabel3.setText("Uploading directory list");
        try{
            List<String> lines =IOUtils.readLines(new FileInputStream("dirList.txt"));
            Number160 dirlistHash = Number160.createHash(username + "dirlist");
            //System.out.println("this hash = " + dirlistHash);
            FuturePut futurePut = node.getPeer().put(dirlistHash).data(new Data(lines)).start();
            futurePut.awaitUninterruptibly();
        }catch(IOException e){System.out.println(e);}
        jLabel3.setText("directory list uploaded");
         }
         public void makeFile(String dir) throws IOException{
             File dirList = new File("dirList.txt");
             fw = new FileWriter(dirList.getAbsoluteFile());
             String[] s = chosenDir.split("\\\\");
             String ss = s[s.length-1];
             chosenDirFolderName = ss;
             if (!dirList.exists()) {
                 dirList.createNewFile();
             }
             writeStuff(dir);
             fw.close();
         }
         
         public void writeStuff(String dir) throws IOException{
             File folder = new File(dir);
             File[] listOfFiles = folder.listFiles();
             
             if(listOfFiles!=null){
                
             
             
             for (File f : listOfFiles){
                 
                 if(f.isFile() && !f.isHidden()){
                        // fw.write(f.toString().substring(chosenDir.length()-chosenDirFolderName.length()) +" |"+ f.length()+"\n");       
                 fw.write(f.toString().substring(chosenDir.length()-chosenDirFolderName.length())+"\n");       
                 
                 }
                 else if(f.isDirectory()&& !f.isHidden()) { 
                     File[] ff =  f.listFiles();
                     if(ff != null){
                     fw.write(f.toString().substring(chosenDir.length()-chosenDirFolderName.length())+"\n");
                     }
                    writeStuff(f.toString());
                 }
                 
                 
             }
             fw.flush();
             }
         }
         
     };
     
     createDirList.execute();
    }
    
    
    SwingWorker listenWorker = new SwingWorker<String, Void>() {
        @Override
        public String doInBackground() throws Exception {
//            try {
//                ServerSocket serverSocket = new ServerSocket(15123);
//                try (Socket socket = serverSocket.accept()) {
//                  //  InputStream stream = new ByteArrayInputStream("hi".getBytes(StandardCharsets.UTF_8));
//                  //  BufferedInputStream bin = new BufferedInputStream(stream);
//                    //bin.read(bytearray,0,bytearray.length);
//                    OutputStream os = socket.getOutputStream();
//                    System.out.println("Sending Files...");
//                    
//                    os.write("asd".getBytes(),0,"asd".length());
//                    os.flush();
//                }
//                
//            } catch (IOException ex) {
//                Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
//            }
            //System.out.println(chosenDir);
            server = new TCPServer();
            
           // server.run();
            
            
            
            return null;
            
        }
        
//        public void setMD(String md){
//            server.setMyDir(md);
//        }
//        
        
//        @Override
//        public void done() {
//        }
    };
    
    SwingWorker loginWorker = new SwingWorker<String, Void>() {
        @Override
        public String doInBackground() {
            userCredentials = new UserCredentials(username, password, "12345");
            try{
                File f = new File ("");
                if( registered(userCredentials)){
                    ConsoleFileAgent fileAgent = new ConsoleFileAgent(f);
                    node.getUserManager().createLoginProcess(userCredentials, fileAgent).execute();
                }
                else{      
                    node.getUserManager().createRegisterProcess(userCredentials).execute();
                    ConsoleFileAgent fileAgent = new ConsoleFileAgent(f);
                    node.getUserManager().createLoginProcess(userCredentials, fileAgent).execute();
                }
            }catch(NoPeerConnectionException | InvalidProcessStateException | ProcessExecutionException | InterruptedException e ){System.out.println(e);};
            
            PutBuilder f  = new PutBuilder(node.getPeer(),node.getPeer().peerID());
            try{
//                Data d = new Data(username);
//                f.data(d);
                FuturePut futurePut = node.getPeer().put(node.getPeer().peer().peerID()).data(new Data(username)).start();
                futurePut.awaitUninterruptibly();
            }catch(IOException e){System.out.println(e);}
            return null;
        }
//        @Override
//        public void done() {  
//        }
    };
        
//    SwingWorker listener = new SwingWorker<String, Void>() {
//        @Override
//        public String doInBackground() throws IOException {
//            ServerSocket serverSocket = new ServerSocket(15123);
//            Socket socket = serverSocket.accept();
//            File transferFile = new File ("tiny6.png");
//            byte [] bytearray = new byte [(int)transferFile.length()];
//            FileInputStream fin = new FileInputStream(transferFile);
//            BufferedInputStream bin = new BufferedInputStream(fin);
//            bin.read(bytearray,0,bytearray.length);
//            OutputStream os = socket.getOutputStream();
//            System.out.println("Sending Files...");
//            os.write(bytearray,0,bytearray.length);
//            os.flush();
//            //socket.close();
//            System.out.println("File transfer complete");
//            return null;
//        }
////        @Override
////         public void done() {   
////         }
//    };

    public String getDir() throws IOException{
        String dir="";
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            dir =  fileChooser.getSelectedFile().getAbsolutePath();     
        }
        //System.out.println(dir);
       // server.setMyDir(dir);
        File settings = new File("TinyP2PSettings.txt");
        try (FileWriter fw2 = new FileWriter(settings)) {
            fw2.write(dir);
        }
         return dir;
    }
    
     private void buildTreeFromString(final DefaultTreeModel model, final String str) {
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
        String [] strings = str.split("\\\\");
        DefaultMutableTreeNode node = root;
    //    int z = 1; 
        for (String s: strings) {
            
           // System.out.println(Arrays.toString(s.split("\\|")));
            try{
            if(s.substring(0,11).equalsIgnoreCase("desktop.ini")){
                 return;
             }
            }catch(StringIndexOutOfBoundsException dsdf){}  
                 
                 
//            String[] fname = s.split("\\|");
//            if(fname.length > 1){
//                double size = Double.parseDouble(fname[1].trim());
//                String prettySize;
//                if(size>1000000){
//                    size = size/1000000;
//                    size =  (double) Math.round(size * 100) / 100;
//                     prettySize = "(" + size + " Mb)";
//                }
//                else if(size>1000){
//                    size = size/1000;
//                     prettySize = "(" + size + " Kb)";
//                }    
//                
//                else{
//                 prettySize = "(" + size + " b)";
//                }   
//                fname[1] = prettySize;
//                s = fname[0] + fname[1];
//                           }
           //System.out.println(getName().substring(1,12));
//            if(s.substring(1,12)){
//                
//            }
            
            
            
            // Look for the index of a node at the current level that
            // has a value equal to the current string
            int index = childIndex(node, s);
            // Index less than 0, this is a new node not currently present on the tree
            if (index < 0) {
                // Add the new node
                DefaultMutableTreeNode newChild = new DefaultMutableTreeNode(s);
                node.insert(newChild, node.getChildCount());
                node = newChild;
            }
            // Else, existing node, skip to the next string
            else {
                node = (DefaultMutableTreeNode) node.getChildAt(index);
            }
        }
    }
    
    private int childIndex(final DefaultMutableTreeNode node, final String childValue) {
        Enumeration<DefaultMutableTreeNode> children = node.children();
        DefaultMutableTreeNode child = null;
        int index = -1;
        while (children.hasMoreElements() && index < 0) {
            child = children.nextElement();
            if (child.getUserObject() != null && childValue.equals(child.getUserObject())) {
                index = node.getIndex(child);
            }
        }
        return index;
    }
    
    
    public void shutdown()  {
        if (node != null && node.isConnected()) {
            node.disconnect();
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                    new MainMenu().setVisible(true);
            }
        });   
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JFrame jFileChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList online;
    private javax.swing.JButton tinyButt;
    // End of variables declaration//GEN-END:variables
  
}

//    private DefaultMutableTreeNode addNodes(DefaultMutableTreeNode curTop, File dir) {
//        String curPath = dir.getPath();
//        DefaultMutableTreeNode curDir = new DefaultMutableTreeNode(curPath);
//        if (curTop != null) { // should only be null at root
//            curTop.add(curDir);
//        }
//        Vector ol = new Vector();
//        String[] tmp = dir.list();
//        for (String tmp1 : tmp) {
//            ol.addElement(tmp1);
//        }
//        Collections.sort(ol, String.CASE_INSENSITIVE_ORDER);
//        File f;
//        Vector files = new Vector();
//        // Make two passes, one for Dirs and one for Files. This is #1.
//        for (int i = 0; i < ol.size(); i++) {
//            String thisObject = (String) ol.elementAt(i);
//            String newPath;
//            if (curPath.equals("."))
//                newPath = thisObject;
//            else
//                newPath = curPath + File.separator + thisObject;
//            if ((f = new File(newPath)).isDirectory())
//                addNodes(curDir, f);
//            else
//                files.addElement(thisObject);
//        }
//        // Pass two: for files.
//        for (int fnum = 0; fnum < files.size(); fnum++)
//            curDir.add(new DefaultMutableTreeNode(files.elementAt(fnum)));
//        return curDir;
//    }