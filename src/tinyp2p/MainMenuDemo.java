/*
* The MIT License
*
* Copyright 2015 Nicky.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
* THE SOFTWARE.
*/
package tinyp2p;

import java.awt.BorderLayout;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.charset.StandardCharsets;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JTree;
import javax.swing.Timer;
import javax.swing.SwingWorker;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeModel;
import net.tomp2p.dht.FutureGet;
import net.tomp2p.dht.FuturePut;
import net.tomp2p.dht.PutBuilder;
import net.tomp2p.peers.Number160;
import net.tomp2p.peers.PeerAddress;
import net.tomp2p.peers.PeerStatistic;
import net.tomp2p.storage.Data;
import org.apache.commons.io.IOUtils;
import util.ConsoleFileAgent;
import org.hive2hive.core.api.interfaces.IH2HNode;
import org.hive2hive.core.api.interfaces.IUserManager;
import org.hive2hive.core.exceptions.NoPeerConnectionException;
import org.hive2hive.core.security.UserCredentials;
import org.hive2hive.processframework.exceptions.InvalidProcessStateException;
import org.hive2hive.processframework.exceptions.ProcessExecutionException;

/**
 *
 * @author Nicky
 */

public class MainMenuDemo extends javax.swing.JFrame {
    private String username;
    private String password;
    private IH2HNode node;
    private UserCredentials userCredentials;
    private String[] ips;
    private DefaultListModel lm;
    private BufferedWriter bw ;
    private FileWriter fw ;
    
    public MainMenuDemo() {
     //   this.br = new BufferedReader(new FileReader("dirList.txt"));
        initComponents();
    }
    
    public MainMenuDemo(String User, String pw, IH2HNode node, Rectangle bounds, String[] ips) {
      
        this.username = User;
        this.password = pw;
        this.node = node;
        this.ips = ips;
     
        initComponents();
        this.setBounds(bounds);
        tinyButt.setOpaque(false);
        tinyButt.setContentAreaFilled(false); //to make the content area transparent
        tinyButt.setBorderPainted(false);        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
  
    //returns whether or not a person is registered or not
    private boolean registered(UserCredentials userCredentials) throws NoPeerConnectionException, InvalidProcessStateException, InterruptedException {    
        IUserManager userManager = node.getUserManager();
        return userManager.isRegistered(userCredentials.getUserId());
    }
   
    class displayUsers implements ActionListener{
        @Override
        public void actionPerformed(ActionEvent evt){
            lm = new DefaultListModel();
            online.setModel(lm);
            try{
             List<PeerAddress> peerMap = node.getPeer().peerBean().peerMap().all();
             for (PeerAddress pa : peerMap){                 
                    FutureGet futureGet = node.getPeer().get(pa.peerId()).start();
                    futureGet.awaitUninterruptibly();                   
                    if (!futureGet.isEmpty()){
                        try {                 
                            lm.addElement(futureGet.data().object());
                            online.setModel(lm);
                        } catch (ClassNotFoundException | IOException ex) {
                        }
                    }                    
                     futureGet.cancel();
             }
             
            online.setModel(lm);
            }catch(NullPointerException e){            
            }  
        }
    }
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser = new javax.swing.JFrame();
        fileChooser = new javax.swing.JFileChooser();
        jScrollPane2 = new javax.swing.JScrollPane();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        online = new javax.swing.JList();
        tinyButt = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        fileChooser.setCurrentDirectory(new java.io.File("C:\\Users\\(._.)\\.ssh"));

        javax.swing.GroupLayout jFileChooserLayout = new javax.swing.GroupLayout(jFileChooser.getContentPane());
        jFileChooser.getContentPane().setLayout(jFileChooserLayout);
        jFileChooserLayout.setHorizontalGroup(
            jFileChooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jFileChooserLayout.setVerticalGroup(
            jFileChooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFileChooserLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(fileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(600, 383));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane2.setOpaque(true);
        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 60, 280, 270));

        jLabel1.setFont(new java.awt.Font("Aharoni", 1, 18)); // NOI18N
        jLabel1.setText("Welcome");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, 295, -1));

        jLabel2.setText("Online users");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, -1));

        online.setBackground(new java.awt.Color(222, 255, 204));
        online.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(online);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 140, 270));

        tinyButt.setBackground(new java.awt.Color(204, 255, 204));
        tinyButt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/tiny7.png"))); // NOI18N
        tinyButt.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        tinyButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tinyButtActionPerformed(evt);
            }
        });
        getContentPane().add(tinyButt, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 0, 40, 40));

        jLabel3.setText("Files");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 40, -1, -1));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/bg3.png"))); // NOI18N
        jLabel7.setText("jLabel7");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(1, 0, 600, 360));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    SwingWorker loginWorker = new SwingWorker<String, Void>() {
        @Override
        public String doInBackground() {
            userCredentials = new UserCredentials(username, password, "12345");
            try{
                File d;
                if( registered(userCredentials)){
                    // d = chooseDir();
                    File f = new File ("C:\\");
                    ConsoleFileAgent fileAgent = new ConsoleFileAgent(f);
                    node.getUserManager().createLoginProcess(userCredentials, fileAgent).execute();
                }
                else{
                    //d = chooseDir();
                    File f = new File ("C:\\");
                    node.getUserManager().createRegisterProcess(userCredentials).execute();
                    ConsoleFileAgent fileAgent = new ConsoleFileAgent(f);
                    node.getUserManager().createLoginProcess(userCredentials, fileAgent).execute();
                }
            }catch(NoPeerConnectionException | InvalidProcessStateException | ProcessExecutionException | InterruptedException e ){System.out.println(e);};
            
            PutBuilder f  = new PutBuilder(node.getPeer(),node.getPeer().peerID());
            try{
                Data d = new Data(username);
                f.data(d);
                FuturePut futurePut = node.getPeer().put(node.getPeer().peer().peerID()).data(new Data(username)).start();
                futurePut.awaitUninterruptibly();
            }catch(IOException e){System.out.println(e);}
            return null;
        }
        @Override
        public void done() {
             
        }
    };
    
    
//    SwingWorker usersWorker = new SwingWorker<String, Void>() {
//        @Override
//        public String doInBackground() {
//            lm = new DefaultListModel();
//            online.setModel(lm);
//            List<Map<Number160, PeerStatistic>> peerMapVerified = node.getPeer().peerBean().peerMap().peerMapVerified();
//            for (Map<Number160, PeerStatistic>  m: peerMapVerified){
//                
//                for (Map.Entry<Number160, PeerStatistic> entry : m.entrySet())
//                {
//                    PeerStatistic ps = entry.getValue();System.out.println(ps.toString());
//                    FutureGet futureGet = node.getPeer().get(ps.peerAddress().peerId()).start();
//                    
//                    futureGet.awaitUninterruptibly();
//                    
//                    //timer.scheduleAtFixedRate(refreshUsers, 0, 1000);
//                    
//                    try {
//                        lm.addElement(futureGet.data().object());
//                        online.setModel(lm);
////
//                    } catch (ClassNotFoundException | IOException ex) {
//                        
//                    }
//                    
//                }
//            }
//            
//            return null;
//        }
//        @Override
//         public void done() {
//             //online.updateUI();
//         }
//    };
    
    
    SwingWorker listener = new SwingWorker<String, Void>() {
        @Override
        public String doInBackground() throws IOException {
            ServerSocket serverSocket = new ServerSocket(15123);
            Socket socket = serverSocket.accept();
    
            return null;
        }
        @Override
         public void done() {
            
         }
    };

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
            loginWorker.execute();
            jLabel1.setText("Welcome, "+ username+"!");
            
            displayUsers du = new displayUsers();                      //set up timer
            Timer tmr = new javax.swing.Timer(7000, du);
            
            tmr.addActionListener(du);
            tmr.setInitialDelay(0);
            tmr.setRepeats(true);
            tmr.start();
            
            try {
            chosenDir = getDir();
            // chosenDir = "C:\\Users\\(._.)\\Documents\\TinyP2P";
            // makeFile(chosenDir);
            
            File f = new File(chosenDir);
            JTree tree = new JTree(addNodes(null,f));
            jScrollPane2.getViewport().add(tree);

            tree.addTreeSelectionListener((TreeSelectionEvent e) -> {
                DefaultMutableTreeNode node1 = (DefaultMutableTreeNode) e
                .getPath().getLastPathComponent();
                System.out.println("You selected " + node1);
            });

            jScrollPane2.getViewport().add(tree);

        } catch ( NullPointerException ex) {
           // Logger.getLogger(MainMenuDemo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
           // Logger.getLogger(MainMenuDemo.class.getName()).log(Level.SEVERE, null, ex);
        }
            
//        try {
//            ServerSocket serverSocket = new ServerSocket(15123);
//            Socket socket = serverSocket.accept();
//        
//        } catch (IOException ex) {
//            Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
//        }
 
    }//GEN-LAST:event_formWindowOpened
    
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        this.dispose();
        shutdown();
        System.exit(0);
    }//GEN-LAST:event_formWindowClosed

    private void tinyButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tinyButtActionPerformed
        Help h = new Help(this.getBounds(),ips);
        h.setVisible(true);       
    }//GEN-LAST:event_tinyButtActionPerformed

    public void sendToPort(String ip, String msg) throws IOException {
        Socket socket = null;
        OutputStreamWriter osw;
        //String str = "Hello World";
        try {
            socket = new Socket(ip, 4014);
            osw =new OutputStreamWriter(socket.getOutputStream(), "UTF-8");
            osw.write(msg, 0, msg.length());
             osw.flush();
        } catch (IOException e) {
            System.err.print(e);
        } finally {
            socket.close();
        }

}
         String chosenDir;   
 
     
    public void makeFile(String dir) throws IOException{
        File dirList = new File("dirList.txt");
        fw = new FileWriter(dirList.getAbsoluteFile());
        bw = new BufferedWriter(fw);
        if (!dirList.exists()) {
            dirList.createNewFile();
        } 
        printStuff(dir);
        bw.close();
        fw.close();
    }
    
    public String getFileNameOnly(String path){
        String[] parts = path.split("\\\\");
        return parts[parts.length - 1];
    }
    List<String> lines ;
    BufferedReader br;
    
    public void populateArrayFromFile() throws FileNotFoundException, IOException{
        lines = IOUtils.readLines(new FileInputStream("dirList.txt"));
        File dirList = new File("dirList.txt");
       // br = new BufferedReader(new FileReader(dirList.getAbsoluteFile()));
       
        List<String> lines =IOUtils.readLines(new FileInputStream(dirList));

      //  String[] myDirs;
        ArrayList<ArrayList> myDirs = new ArrayList<> ();
        
        for (String line : lines){
            ArrayList<String> thisDir = new ArrayList<> (Arrays.asList(line.split("\\\\")));
            myDirs.add(thisDir);
        }
        
        for(ArrayList d : myDirs){
            
        }
        
        System.out.println(myDirs.toString());
        
        
//        DefaultMutableTreeNode parent = new DefaultMutableTreeNode("This is parent node.");
//        parent.
        
//       JTree tree = new JTree(); 
//       
//        for(ArrayList d : myDirs){
//                tree.add(d);
//        }
////       JTree  tree1  new JTree(tree);
////       
////       JTree tree = new JTree(myDirs.toArray()); 
//       jScrollPane2.getViewport().add(tree);
    }
   
//     private DefaultMutableTreeNode addNodes2(DefaultMutableTreeNode curTop, String dir) throws IOException {
//        String curPath = dir;
//        
//        DefaultMutableTreeNode curDir = new DefaultMutableTreeNode(curPath);
//        
//        if (curTop != null) { // should only be null at root
//            curTop.add(curDir);
//        }
//        Vector ol = new Vector();
//       // List<String> lines = IOUtils.readLines(new FileInputStream("dirList.txt"));
//        //String[] tmp = dir.list();
//        
////        for (String tmp1 : lines) {
////            ol.addElement(tmp1);
////        }
////        Collections.sort(ol, String.CASE_INSENSITIVE_ORDER);
//        File f;
//        Vector files = new Vector();
//        // Make two passes, one for Dirs and one for Files. This is #1.
//       // for (int i = 0; i < ol.size(); i++) {
////            String thisObject = (String) ol.elementAt(i);
////            String newPath;
//           //if (curPath.equals("."))
//              //  newPath = thisObject;
//            
//            if (curPath.substring(0,3).equals("[D]"))
//                addNodes2(curDir, br.readLine());
//            else
//                files.addElement(curPath);
//    //   }
//        // Pass two: for files.
////        for (int fnum = 0; fnum < files.size(); fnum++)
////            curDir.add(new DefaultMutableTreeNode(files.elementAt(fnum)));
//        return curDir;
//    }
         
         
         
         
//        DefaultMutableTreeNode parent = new DefaultMutableTreeNode("This is parent node.");
//            DefaultMutableTreeNode child = new DefaultMutableTreeNode("This is child node.");
//            
//////            DefaultMutableTreeNode child1 = new DefaultMutableTreeNode("This is child node.");
//            parent.add(child);
////            child.add(child1);
//         
//        
//          for (String line : lines){
//               if(line.substring(0,3).equals("[F]")){  
//                   DefaultMutableTreeNode child = new DefaultMutableTreeNode(line);
//               }
//               else{
//                   
//               }
//         }
      
        //addToTree(parent);
         
  //  }
    
//    public DefaultMutableTreeNode recursionSucks(DefaultMutableTreeNode d){
//      
//        for (String line : lines){
//               if(line.substring(0,3).equals("[F]")){  
//                   DefaultMutableTreeNode child = new DefaultMutableTreeNode(line);
//               }
//               else{
//                   
//               }
//         }
//        
//    }
    
    
    
  //  JTree tree = new JTree();
//    BufferedReader br;
//     DefaultMutableTreeNode dmt ;
//      List<String> lines ;
//    DefaultListModel newlm ;
//     public void printFile(String dir) throws FileNotFoundException, IOException {
//          File dirList = new File("dirList.txt");
//          br = new BufferedReader(new FileReader(dirList.getAbsoluteFile()));
//          File folder = new File(dir);
//          
//          
//          
//           
//
//         
//          newlm =  new DefaultListModel();
//         dmt = new DefaultMutableTreeNode(chosenDir);
//          
//         lines = IOUtils.readLines(new FileInputStream(dir));
//         JTree tree1 = new JTree(addToTree(dmt));
//          br.close();
//           jScrollPane2.getViewport().add(tree1);
//            
//     }
//    
//   
//    
//        public DefaultMutableTreeNode addToTree(DefaultMutableTreeNode d) throws IOException{
//             DefaultMutableTreeNode sdfs =null;
//            for (String line : lines){
//                
//                System.out.println(line.substring(0,3));
//                
//                if(line.substring(0,3).equals("[F]")){        
//                   newlm.addElement(line.substring(0,3));
//                   
//                    //dmt.add(pt.substring(0,3));
//                   // dmt.add(dmt);
//                   
//                }
//                else{
//                    sdfs = new DefaultMutableTreeNode(line.substring(0,3));
//                    newlm.addElement(addToTree(sdfs));
//                    
//               
//                  //  DefaultListModel dd = new DefaultListModel();
//                   // dd.
//                    //dd.addElement(pt.substring(0,3));
//                }
//            } 
//       return sdfs;     
//    }

    public void printStuff(String dir) throws IOException{
        File folder = new File(dir);
            File[] listOfFiles = folder.listFiles();
           
            for (File f : listOfFiles){
                if(f.isFile()){
                  //  bw.write("[F]" + f.toString() +" |"+ f.length());
                    bw.write(f.toString());
                    bw.newLine();
                }
                else {
                 //  bw.write("[D]" + f.toString() );
                    bw.write(f.toString());
                    bw.newLine();
                    printStuff(f.toString());
                }
            }       
        bw.flush();        
    }
    
    
    public String getDir() throws IOException{
        String dir="";
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            dir =  fileChooser.getSelectedFile().getAbsolutePath();     
        }
        return dir;
        
    }
    
    
    public void shutdown()  {
        if (node != null && node.isConnected()) {
            node.disconnect();
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainMenuDemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainMenuDemo().setVisible(true);
                
            }
        });
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JFrame jFileChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList online;
    private javax.swing.JButton tinyButt;
    // End of variables declaration//GEN-END:variables
    
    private DefaultMutableTreeNode addNodes(DefaultMutableTreeNode curTop, File dir) {
        String curPath = dir.getPath();
        DefaultMutableTreeNode curDir = new DefaultMutableTreeNode(curPath);
        if (curTop != null) { // should only be null at root
            curTop.add(curDir);
        }
        Vector ol = new Vector();
        String[] tmp = dir.list();
        for (String tmp1 : tmp) {
            ol.addElement(tmp1);
        }
        Collections.sort(ol, String.CASE_INSENSITIVE_ORDER);
        File f;
        Vector files = new Vector();
        // Make two passes, one for Dirs and one for Files. This is #1.
        for (int i = 0; i < ol.size(); i++) {
            String thisObject = (String) ol.elementAt(i);
            String newPath;
            if (curPath.equals("."))
                newPath = thisObject;
            else
                newPath = curPath + File.separator + thisObject;
            if ((f = new File(newPath)).isDirectory())
                addNodes(curDir, f);
            else
                files.addElement(thisObject);
        }
        // Pass two: for files.
        for (int fnum = 0; fnum < files.size(); fnum++)
            curDir.add(new DefaultMutableTreeNode(files.elementAt(fnum)));
        return curDir;
    }
    
    
}
